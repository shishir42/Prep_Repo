https://www.youtube.com/watch?v=61v23Ce5SXA
https://www.youtube.com/watch?v=I2NNxr3WPDo


https://www.youtube.com/watch?v=gieEQFIfgYc
https://www.youtube.com/watch?v=lATafp15HWA
https://www.youtube.com/watch?v=6Qqb2GBGgGc

Static type-checking:
Static types systems describe the shapes and behaviors of what our values will be when we run our programs. A type-checker like TypeScript uses that information and tells us when things might be going off the rails.

const message = "hello!";
 
message();

This expression is not callable.
  Type 'String' has no call signatures.

Non-exception Failures:

const user = {
  name: "Daniel",
  age: 26,
};
 
user.location;
Property 'location' does not exist on type '{ name: string; age: number; }'.

Types for Tooling:
The type-checker has information to check things like whether we’re accessing the right properties on variables and other properties. Once it has that information, it can also start suggesting which properties you might want to use.

tsc, the TypeScript compiler:

npm install -g typescript

What about if we did introduce a type-checking error? Let’s rewrite hello.ts:
// This is an industrial-grade general-purpose greeter function:
function greet(person, date) {
  console.log(`Hello ${person}, today is ${date}!`);
}
 
greet("Brendan");


Error: If we run tsc hello.ts again, notice that we get an error on the command line!
Expected 2 arguments, but got 1.

Emitting with Errors:

noEmitOnError

Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.

This defaults to false, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.

tsc --noEmitOnError hello.ts

Explicit Types:

function greet(person: string, date: Date) {
  console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
 
greet("Maddison", Date());

Error: Argument of type 'string' is not assignable to parameter of type 'Date'.

Perhaps surprisingly, calling Date() in JavaScript returns a string. On the other hand, constructing a Date with new Date() actually gives us what we were expecting.

function greet(person: string, date: Date) {
  console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
 
greet("Maddison", new Date());

Keep in mind, we don’t always have to write explicit type annotations. In many cases, TypeScript can even just infer (or “figure out”) the types for us even if we omit them.

let msg = "hello there!";
    
let msg: string

Erased Types:
Let’s take a look at what happens when we compile the above function greet with tsc to output JavaScript:

"use strict";
function greet(person, date) {
    console.log("Hello ".concat(person, ", today is ").concat(date.toDateString(), "!"));
}
greet("Maddison", new Date());

Downleveling:
One other difference from the above was that our template string was rewritten from

`Hello ${person}, today is ${date.toDateString()}!`;
to

"Hello ".concat(person, ", today is ").concat(date.toDateString(), "!")

This process of moving from a newer or “higher” version of ECMAScript down to an older or “lower” one is sometimes called downleveling.

tsc --target es2015 hello.ts

function greet(person, date) {
  console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
greet("Maddison", new Date());


Strictness:
The strict flag in the CLI, or "strict": true in a tsconfig.json toggles them all on simultaneously, but we can opt out of them individually. The two biggest ones you should know about are noImplicitAny and strictNullChecks.

noImplicitAny:
Turning on the noImplicitAny flag will issue an error on any variables whose type is implicitly inferred as any.

strictNullChecks:
By default, values like null and undefined are assignable to any other type. This can make writing some code easier, but forgetting to handle null and undefined is the cause of countless bugs in the world - some consider it a billion dollar mistake! The strictNullChecks flag makes handling null and undefined more explicit, and spares us from worrying about whether we forgot to handle null and undefined.

