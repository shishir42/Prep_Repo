// In C#, a partial class is a class that can be defined in multiple files. The class is split into multiple files, and each file contains a part of the class definition.
// Here's an example of how to use a partial class in C#:
// File1.cs
public partial class MyClass
{
    private int number;
}

// File2.cs
public partial class MyClass
{
    private string name;

    public void SetName(string value)
    {
        name = value;
    }
}

// Program.cs
class Program
{
    static void Main(string[] args)
    {
        MyClass myObj = new MyClass();
        myObj.SetName("John");
        Console.WriteLine(myObj.Name);
    }
}



// In this example, we define a MyClass class as a partial class that is split into two files: File1.cs and File2.cs. The two parts of the class are merged by the compiler to create a single class definition.
// In File1.cs, we define a private field number that is only accessible from within the MyClass class.
// In File2.cs, we define a private field name and a public method SetName that sets the value of the name field.
// In Program.cs, we create an instance of the MyClass class and call the SetName method to set the value of the name field. We then print out the value of the Name property, which is automatically generated by the compiler.
// The partial keyword allows us to split the class definition into multiple files, which can make the code easier to manage and organize. It is often used in large projects where multiple developers are working on the same class, as it allows different parts of the class to be worked on independently.

// Separation of Concerns: By splitting a class across multiple files, you can separate its implementation into logical parts, which can be easier to maintain and update. For example, you can put the auto-generated code in one file and your custom code in another file.

// Collaboration: Partial classes enable multiple developers to work on different parts of a class without interfering with each other's code. Each developer can work on their own file and merge their changes together.

// Code Organization: Partial classes can improve code organization by grouping related methods, properties, and fields in different files. This can make code easier to read, navigate, and understand.

// Code Generation: Partial classes are commonly used with code generation tools, such as Visual Studio's designer tools. These tools generate code in one file and allow you to add custom code in another file, without modifying the generated code.

// Code Reuse: Partial classes can be used to define the same class across multiple files. This can be useful when you want to reuse a class across multiple projects or when you want to create a class with a large number of methods, properties, and fields.

// Reflection: Partial classes allow you to add metadata attributes to a class across multiple files, which can be useful when using reflection to inspect the class.