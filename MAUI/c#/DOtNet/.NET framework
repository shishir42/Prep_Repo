The .NET framework is a software development platform that supports an object-oriented approach. It offers services, like memory management, networking, security, and type safety.

There are a lot of components that make up the .NET framework, and some of them are as follows:

.NET Class Library
.NET Framework
Language Runtime
Application Domain
Profiling

JIT stands for Just In Time. It is a compiler in CLR responsible for the execution of .NET programs of different languages by converting them into machine code. It speeds up the code execution and supports multiple platforms.
JIT is the abbreviation of Just in Time. It is a compiler that is used to convert intermediate code into native code easily.In .NET, during execution, the code is converted into the native language, also called the byte code. This is processed by the CPU, and the framework helps with the conversion.

MSIL is the abbreviation of Microsoft Intermediate Language. It is used to provide the instructions required for operations such as memory handling, exception handling, and more. It can also provide instructions to initialize and store values and methods easily.

CLR stands for Common Language Runtime. It forms to be the most vital component of .NET as it provides the foundation for many applications to run on.
If a user writes an application in C#, it gets compiled and converted to intermediate code. After this, CLR takes up the code and works on it with respect to the following aspects:
Memory management
Security protocols
Libraries for loading
Thread management

BCL stands for Base Class Library. It comprises classes, interface, and value types. It is the foundation for building .NET Framework applications, components, and controls.

FCL stands for Framework Class Library and is a collection of reusable types, including classes, interfaces, and data types included in the .NET Framework. It is used for developing a wide variety of applications, as it provides access to system functionality.

Types in .NET Framework are either Value Type or Reference Type. A Value Type is stored in the stack and it holds the data within its own memory allocation. While a Reference Type is stored in the heap and it contains a pointer to another memory location that holds the real data.

EXE is an executable file that works as an application and it runs individually as it contains an entry point. DLL is a Dynamic Link Library which is a supportive file to other applications, and it cannot run individually.

The stack is used for static memory allocation and access to this memory is fast and simple to keep track of. Heap is used for dynamic memory allocation and memory allocation to variables that happen at run time. Accessing the heap memory is complex and slower compared to the stack.

string is immutable and fixed-length, whereas StringBuilder is mutable and variable length. The size of the .string cannot be changed, but that of the .stringbuilder can be changed.

The base class is a class whose members and functions can be inherited, and the derived class is the class that inherits those members and may also have additional properties.  

Reflection objects are used for creating type instances and obtaining type information at runtime. The classes in the System.Reflection namespace gives access to the metadata of a running program.

The Global Assembly Cache is a machine-wide code cache that is stored in a folder in the Windows directory. It stores the .NET assemblies that are specifically designated to be shared by all applications executed on the system.

Marshaling is the process of transforming types in the managed and unmanaged code.

Serialization is the process of converting the state of an object into a form (a stream of bytes) to be persisted or transported. Deserialization converts a stream into an object and is the opposite of serialization. These processes allow data to be stored and transferred.

An assembly is the simple collection of all of the logical units present. Logical units are entities that are required to build an application and later deploy the same using the .NET framework. It can be considered as a collection of executables and DLL files.
There are four main components of an assembly. They are as follows:
Resource: A collection of related files
MSIL: The Intermediate Language code
Metadata: The binary data of a program
Manifest: A collection of information about the assembly

Yes, it is possible to manually set a session’s out time. It can easily be done by manipulating the web.config file.

Function
- Can only return one value
- No support for exception handling using try-catch blocks
- The argument consists of only one input parameter
- A function can be called from a stored procedure

Stored Procedure
- Can return any number of values
- Supports the usage of try-catch blocks for exception handling
- Both input and output parameters are present
- The stored procedure cannot be called from a function

There are eight events as shown below that take place in an order to successfully render a page(page life cycle):
Page_PreInit
Page_Init
Page_InitComplete
Page_PreLoad
Page_Load
Page_LoadComplete
Page_PreRender
Render

**************

What do the following acronyms in .NET stand for: IL, CIL, MSIL, CLI and JIT?

IL, or Intermediate Language, is a CPU independent partially compiled code. IL code will be compiled to native machine code using current environmental properties by Just-In-Time compiler (JIT). JIT compiler translates the IL code to an assembly code and uses the CPU architecture of the target machine to execute a .NET application. In .NET, IL is called Common Intermediate Language (CIL), and in the early .NET days it was called Microsoft Intermediate Language (MSIL).

CLI, or Common Language Infrastructure, is an open specification developed by Microsoft. It is a compiled code library used for deployment, versioning, and security. In .NET there are two CLI types: process assemblies (EXE) and library assemblies (DLL). CLI assemblies contain code in CIL, and as mentioned, during compilation of CLI programming languages, the source code is translated into CIL code rather than into platform or processor specific object code.

To summarize:

1. When compiled, source code is first translated to IL (in .NET, that is CIL, and previously called MSIL).
2. CIL is then assembled into a bytecode and a CLI assembly is created.
3. Before code execution, CLI code is passed through the runtime’s JIT compiler to generate native machine code.
4. The computer’s processor executes the native machine code.

***
Explain the difference between the Stack and the Heap.
The short answer would be: in the Stack are stored value types (types inherited from System.ValueType), and in the Heap are stored reference types (types inherited from System.Object).

We can say the Stack is responsible for keeping track of what is actually executing and where each executing thread is (each thread has its own Stack). The Heap, on the other hand, is responsible for keeping track of the data, or more precise objects.

*****

How do you implement a generic action in WebAPI?
It’s not possible, as the WebAPI runtime needs to know the method signatures in advance.

*********



***
ASP.Net
ASP.NET is a web application framework developed by Microsoft to build dynamic websites, web applications, and services. It allows developers to build web applications using .NET languages like C# or Visual Basic.

ASP.NET provides a rich set of features and tools for building modern and scalable web applications, such as:

Server-side programming: Developers can write server-side code using .NET languages to create dynamic web applications that interact with databases and other server-side services.

MVC architecture: ASP.NET follows a Model-View-Controller (MVC) architectural pattern that separates an application into three main components: the Model, which represents the data; the View, which represents the user interface; and the Controller, which handles user input and directs the flow of data.

Web API: ASP.NET provides a powerful and flexible Web API framework that allows developers to create RESTful web services to expose data and functionality to other applications.

Authentication and authorization: ASP.NET provides built-in support for authentication and authorization, including support for various authentication providers such as Microsoft, Facebook, or Google, and role-based authorization.

Cross-platform support: ASP.NET Core, the latest version of ASP.NET, is a cross-platform and open-source framework that allows developers to build and run web applications on Windows, Linux, and macOS.

ASP.NET is widely used by developers and organizations to build modern and scalable web applications and services. It offers a robust set of features and tools that make it easier to build complex web applications while maintaining high performance and security.

https://learn.microsoft.com/en-us/dotnet/core/introduction
https://dotnet.microsoft.com/en-us/learn/aspnet


***
https://www.interviewbit.com/dot-net-interview-questions/

***
https://www.simplilearn.com/dot-net-interview-questions-and-answers-article

***
BCL refers to Base Class Library. It is the foundation of .NET framework applications, components, and controls. It comprises of basic, fundamental types like System.String and System.DateTime and offers functionalities like threading, input/output, security, diagnostics, etc.

***
The main disadvantages of cookies include:

Possible security risk, as they are stored in a clear text
Not secure, as encryption & decryption is easy
Cookies can be disabled on any user’s computer
Can be edited or deleted
Cookies can store limited data.

***

Explain Marshaling in .Net.
Marshaling is defined as the process of transforming types in the managed and unmanaged code. It is the most important service given by CLR.

*******

What do you understand about Reflection in C#? What are the common uses of Reflection?

In C#, Reflection is a powerful feature that allows a program to examine and manipulate the metadata of types, objects, and assemblies at runtime. Reflection enables a program to dynamically load and create types, access their properties, methods, and fields, and invoke their members.

Reflection is commonly used in the following scenarios:

Plugin architectures: Reflection enables a program to dynamically load and execute code from external assemblies, allowing for flexible and extensible architectures.

Serialization: Reflection is used to serialize and deserialize objects, converting between their binary or text representations and their in-memory representations.

Code generation: Reflection is used to generate code at runtime, such as dynamic proxies or code-behind classes.

Testing and debugging: Reflection can be used to inspect and modify the behavior of objects at runtime, which can be useful for testing and debugging purposes.

Dependency injection: Reflection is used to instantiate and inject dependencies into objects, allowing for loosely-coupled architectures and easier testing.

Assembly assembly = Assembly.LoadFrom("MyLibrary.dll");
Type type = assembly.GetType("MyLibrary.MyClass");
object instance = Activator.CreateInstance(type);
MethodInfo method = type.GetMethod("MyMethod");
object result = method.Invoke(instance, null);


In this example, the program loads an external assembly, gets a type from the assembly, creates an instance of the type, gets a method from the type, and invokes the method on the instance. This allows the program to execute code from the external assembly at runtime, without having to know the details of the assembly at compile-time.

While Reflection can be a powerful tool, it also has performance and security implications. Reflection can be slower than direct invocation of code, and can expose internal details of types and assemblies that were not intended to be exposed. Therefore, it should be used judiciously and with caution.

*************

What is an Assembly Manifest?

An Assembly Manifest is a metadata file that contains information about an assembly, such as its version, culture, strong name, dependencies, and security requirements. The manifest is an integral part of the assembly and is stored as a binary resource within the assembly file.

The manifest provides important information that enables the .NET runtime to load and execute the assembly correctly. When an assembly is loaded into memory, the runtime reads the manifest to determine the assembly's identity, dependencies, and security requirements. Based on this information, the runtime can verify that the assembly is safe to execute, resolve any dependencies that the assembly requires, and load the assembly's code into memory.

The Assembly Manifest contains the following information:

Assembly identity: The name, version, culture, and public key token that uniquely identify the assembly.

Module list: The list of modules (i.e., .NET code files) that make up the assembly.

Type references: The list of all types (classes, interfaces, etc.) that are referenced by the assembly.

Resource references: The list of all non-code resources (such as images, sounds, or configuration files) that are embedded in the assembly.

Assembly references: The list of other assemblies that the current assembly depends on.

Security information: The list of permissions and other security requirements that the assembly requires.

Hashes and signatures: The digital signature and hash values that verify the authenticity and integrity of the assembly.

*************

What files get generated in Debug folder when you create and compile an application in C#?

When you create and compile an application in C#, several files are generated in the Debug folder, depending on the type of project and its settings. The Debug folder is typically located within the project directory, under the bin folder.

Here are some of the files that may be generated in the Debug folder:

The application executable: This is the main executable file that contains the compiled code of your application. It has the same name as your project, with an extension of .exe. This file is what you would run to start your application.

Associated DLLs: If your application references any external libraries or assemblies, the corresponding DLL files will also be generated in the Debug folder.

PDB files: PDB (Program Database) files contain debugging information that is used by the Visual Studio debugger to help you debug your code. These files have the same name as the corresponding executable or DLL file, with an extension of .pdb.

Configuration files: If your application uses app.config or web.config files for configuration settings, these files will also be copied to the Debug folder.

Other files: Depending on the type of project and its settings, other files may be generated in the Debug folder, such as resource files, icon files, or XML documentation files.

It's worth noting that the files generated in the Debug folder are meant for development and debugging purposes only. When you're ready to deploy your application, you would typically compile it in Release mode, which generates optimized and stripped-down versions of the executable and associated files. These files would be deployed to a production environment, while the Debug files would remain in your development environment.

*********

****

Reflection in C# extracts metadata from the datatypes during runtime. 

To add reflection in the .NET framework, simply use System.Refelction namespace in your program to retrieve the type which can be anything from:

Assembly
Module
Enum
MethodInfo
ConstructorInfo
MemberInfo
ParameterInfo
Type
FieldInfo
EventInfo
PropertyInfo

******
Summarize the Four Steps for Compiling C# Code.
Compile source code into a managed module
Combine the newly created module from step 1 with assembly code
Load the CLR (Common Language Runtime) 
Execute the assembly with CLR 

*****



State the uses of Reflection in C#
Reflection is the process of describing the metadata of types, methods, and fields in a code.

Some of the major use of Reflection in C#:

Load assemblies at the given runtime
Help to learn about the definition of entities like class, or enumeration by groups
Get to know about fields, properties, constructors, events, and methods in a Class
Helps to learn about the properties of entities such as their types, read-only status, etc.
Helps in getting and setting a property’s value
Helps to learn about an entity’s attributes.

******

What is Serialization in C#?
When we want to store any object to a memory, a database, or a file, it needs a special process known as Serialization. 

Serialization is the process of converting an object into a different form to store it on to a file, database, or memory. The purpose of Serialization is to transfer the object and its state across the network and recreate it successfully when needed.

The reverse of Serialization is known as Deserialization.

There are many types of serialization in C#, such as:

Binary serialization: To save the state of the object in binary format.  This is done using classes defined in the System.Runtime.Serialization namespace.

Soap Serialization: To save the state of the object in binary format, with the use of network-related communication.

XML Serialization: To save the state of the object in XML format. This is done using classes defined in the System.Xml.Serialization namespace.

JSON Serialization: To save the state of the object in JSON format.  This is done using classes defined in the System.Text.Json namespace.

********

