- Interview

* class based or functional base
* JS - Hoisting - working - only work with var- why not with let and var (+5) also w.r.t to normal and arrow functions (let or const or var are hoisted but var are initialized with undefined and let are const are in temporal zone where access are not possible, until the let and const are defined you will not be able to access) - done
* function are hoisted, why function need to be hoisted - done
* arrow function are hoisted or not (+1) - done
* let vs var vs const (+3) - done
* this keyword (+1)
* What is event loop and precedence along with promise and settimeout
* settimeout - JS is single threaded interpreted language
* asynchronous - setTimeout, setInterval, promise, observable 
* settimeout vs setinterval
* List out the es6 features (+2)
* rest operator 
* string palindrome - 
* array.reverse()
* shallow copy and deep copy (+3) also methods to create deep copy
* closure (+4)
* map vs reduce 
* reduce parameters in functions 
* promise vs callback
* promise (+1)
* callback
* callback hell(+1) and alternative 
* currying 
* map vs foreach (+2) with example 
* prototype inheritance 
* call vs apply * bind (when to use)
* bind vs regular function
* inside usage of let and var in forloop
* map vs filter 
* prototype and how its works 
* Arrow functions and advantages (+1) 
* real example of arrow to use to make sense and same for normal functions
* spread vs rest operator 
* Get the second last element for the array
* console.log(3+"3") and console.log(3-"3")
* node js middleware 
* multiple time return statement (generators ES6)
* convert object to arrays using Object.entries and without as well
* object destructing with complex object and also what will happen if object is null (null check while destructuring) (https://www.youtube.com/watch?v=QQNjidzLZ8E)
* why do we need react.js w.r.t javascript 
* null vs undefined 
* IIFE
* == and ===
* remove duplicate from array 
* why js weakly typed 
* js is synchronous or asynchronous
* async vs defer 
* lexical scope vs scope chain
* ES5 vs ES6
* Methods of arrays 
* remove the duplicate from string or array 
* const name = "rahul kumar"; const res = [...new Set(name.split(""))]; console.log(res);
* use strict
* why can't browser read jsx 
* micro frontend 
* mono repo
* why code bundling is important 
* input box code like validation and error 
*  Local Scope, Lexical Scope and Global Scope
* How JavaScript Engine works
* destructuring with complex data

***********************

* react - 17 and latest (18) 
* react-native - 0.69 and latest (0.70) - done
* react and features (+2) - done
* compare js and react.js - done 
* why it is know as one way data binding - done
* babel usage 
* virtual dom and real dom (+4) https://medium.com/devinder/react-virtual-dom-vs-real-dom-23749ff7adc9 https://www.educative.io/answers/what-is-the-difference-between-virtual-and-real-dom-react https://www.youtube.com/watch?v=dxz9HZ40h4I (done)
* react js is library or framework - done
* usage of ES6 - 
* different part of components - done
* functional vs class component (+3) - done
* hooks (+1) and custom hooks - 16.8 - done
* why hooks is introduced () - done
* class based life cycle methods (+3) - done
* pure component (+3) and example with code https://www.youtube.com/watch?v=o22KRrxab18&t=2s (26:00) - done
* higher-order component (+1) - done
* context api (+2)
* why we need to use redux if it is already avalable 
* explain redux flow (+3)
* useReducers - done
* middleware in redux (+1)
* Thunk vs Saga
* handle error - done
* render props - done
* refs (+3) - done
* forward ref - done
* state (+1) - done
* react portals - done
* how to pass data to one component to another component (+7) ways and which one is better (parent --> child and child ---> parent) - done
* props drilling (+2) and how to avoid - done
* How to print data which is get from API calls - done
* How to manage an performance in react (+2) - done
* useMemo vs useCallback (+1) - done
* useReducer vs useMemo vs useContext- done
* useSelector vs useDispatch 
* Lifecycle methods vs Hooks - done
* unidirectional data flow in react js - done
* react memo - done
* HOC and any usecase (+4)https://www.youtube.com/watch?v=o22KRrxab18&t=2s(40:00) - done
* Mounting  - done
* Different ways to call API in react js - done
* New features in react 
* create an two dropdown and one dropdown selected based on the other dropdown should populated (use the objects array like India has cities) 
* generate list and delete button along with checkbox once the checkbox is checked and then appear the delete button 
* useState (+2): It is functions - done
* controlled and uncontrolled components (+1) - done
* custom hooks - done
* strict mode in react (react.strictMode), js(useStrict) vs (react.strictMode) - done
* explain react router mechanism - 
* what is JSX (+1) - done
* element vs component - done
* react intercepts - done
* react fiber - done
* Lazy loading - done
* How to manage nested routes in terms of role based routing 
* print html string along with styles using dangerouslySetInnerHtml and check the Cross site scripting(XSS) attacks - done
* Implement the pagination using react hooks alone with page numbers (https://www.youtube.com/watch?v=szXMBGKGTdE&t=17s)
* Implement the input box and print the value only when user has stopped typing (https://www.youtube.com/watch?v=QQNjidzLZ8E)
* why we need to use keys, explain w.r.t react components - done
* syntactic events in react  - done
* reconciliation  - It's is process of tree comparison which is used by react to update the real dom.(done)
* context API vs redux
* actions and reducers in redux
* import "./styles.css";
import { useState, useEffect } from "react";

export default function App() {
  const [users, setUsers] = useState(null);
  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then((res) => res.json())
      .then((json) => setUsers(json));
  }, []);
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      {users && users.map((user) => <div>{user.name}</div>)}
    </div>
  );
}
* react fragments (+1) - done
* Explain the purpose of render() in ReactJS - done
* what is events and how to create in react - done
* cases when you should use ref - done
* react vs angular (+1) and can be use both react and angular together - done
* how you can create forms in react - done
* flux
* single source of truth in redux
* switch keyword in react route 
* react router vs conventional router 
* why react is so popular - done
* folder structure in react- done 
* state vs props - done
* useMemo vs useCallback - done 
* profiler in react js - check the performance of app - (done)
* js normal function vs react custom hooks (you can use react js life cycle method inside custom hook) - (done)
* library vs framework () - done
* Can react hooks covered the all life cycle methods: No, 3 methods are not covered,  getsnapshotbeforeupdate, getderivedstatefromerror and componentdidcatch.
* React Redux vs React-Context API (resolved for prop drilling)(we can used both)
* Map vs forEach (in context of reactjs) - done
* Will redux save the data even after the browser refresh - no, it will not saved the data after page refresh, if you using redux-persist then it will saved.
* Why use state inside react component-> React flow is different compared to other mechanism like to reflect the data in the view, component need to re-render otherwise it will not reflect the data, Here data is store in the state, once state is updating then automatically view will re-render and you will see the updated data. (done)
Also props will help to update the data in the UI but its take the data from outside not the inside of component.(done)
* react js 18 - features https://react.dev/blog/2022/03/29/react-v18
* can react js follow MVC: no it is only use view, you can use modal with the help of redux (done)
* why react js is so fast (done)
* useId hook 
* challenges while working on react (done)
* how and significance components is used in the application 
* when page load where the api call need to implement (class and functional component) (explain the sequence of methods) - (done)
* why useState is required.(done)
* how to validate the forms in react (done)
* alterative of redux 
* services in reactjs-done
* UI library for react
* Limitation of react
* Unit test in react (done)
* Stop watch app
* Counter app using redux


Pending:
1. React Without ES6
2. React Without JSX
3. Static Type Checking
4. Web Components
5. JSX In Depth
6. React router
7. React redux
8. Apps 

https://www.geeksforgeeks.org/what-are-the-different-phases-of-reactjs-component-lifecycle/
https://www.geeksforgeeks.org/explain-lifecycle-of-component-re-rendering-due-to-re-rendering-of-parent-component/?ref=rp
https://www.geeksforgeeks.org/reactjs-lifecycle-methods-order-in-mounting/?ref=rp
https://www.geeksforgeeks.org/explain-lifecycle-of-reactjs-due-to-all-call-to-this-setstate-function/?ref=rp
https://www.geeksforgeeks.org/explain-the-react-component-lifecycle-techniques-in-detail/?ref=rp
https://www.geeksforgeeks.org/explain-lifecycle-methods-of-react-components/?ref=rp
https://www.geeksforgeeks.org/explain-new-lifecycle-methods-in-react-v16-3/?ref=rp
https://www.geeksforgeeks.org/explain-the-new-feature-of-react-hooks-introduced-in-react-v16-8/?ref=rp
https://www.geeksforgeeks.org/explain-new-context-api-in-react-16/?ref=rp
https://www.geeksforgeeks.org/explain-dirty-checks-in-react-js/?ref=rp
https://www.geeksforgeeks.org/difference-between-react-component-and-react-purecomponent/?ref=rp
https://www.geeksforgeeks.org/explain-the-initial-cycle-in-react-which-happens-during-the-first-render/?ref=rp
https://www.geeksforgeeks.org/how-to-convert-functional-component-to-class-component-in-reactjs/?ref=rp
https://www.geeksforgeeks.org/when-to-use-a-class-component-over-a-function-component-in-reactjs/?ref=rp


HTML
* sematic tags
* html elements and tags
* meta tag and properties 
* document.createElement and document.createFragments
* DOM
* local storage vs session storage 
* list out the block elements
* innerHtml 
* make a list in js 
*    

* css
* absolute vs relative vs static position - parent child1 child2 (+1)
* flexbox
* display: none and visibility: hidden (+1)
* advantages of css
* put div side by side without modified the code 
<div>
  <h1>T1</h1>
</div>
<div>
  <div>
    <h1>T2</h1>
  </div>
</div>

div {
  display: inline-block;
  vertical-align: top;
  margin-right: 20px;
}
*If the parent element has a relative position and the child element has an absolute position, the child element will be aligned based on the coordinates specified in its CSS code. Specifically, the top, right, bottom, and left properties of the child element's CSS code will determine its position relative to its nearest positioned ancestor, which in this case is the parent element.

For example, if the child element has the following CSS code:
position: absolute;
top: 50px;
left: 100px;

This means that the child element will be positioned 50 pixels down from the top of the parent element, and 100 pixels to the right of the left edge of the parent element. The child element's position is absolute, which means it is taken out of the normal flow of the document and positioned relative to the nearest positioned ancestor (in this case, the parent element).

* Here are some coding approaches you can use to design a screen using responsive design:

Use a Mobile-First Approach: Start by designing for the smallest screen size (mobile devices) and then scale up to larger screen sizes. This approach will help you to prioritize the most important content and ensure that it is easily accessible on smaller screens.

Use CSS Media Queries: CSS Media Queries are used to apply styles based on the screen size. You can use Media Queries to define different styles for different screen sizes. For example:

@media only screen and (max-width: 768px) {
  /* Styles for screens smaller than 768px */
}

@media only screen and (min-width: 768px) {
  /* Styles for screens larger than 768px */
}
Use a Responsive Grid System: Use a responsive grid system like Bootstrap or Foundation to layout content. A grid system allows you to create a layout that is flexible and adaptable to different screen sizes. For example:
<div class="row">
  <div class="col-xs-12 col-md-6">
    Content
  </div>
  <div class="col-xs-12 col-md-6">
    Content
  </div>
</div>

In this example, the content will be displayed in a two-column layout on desktop screens (col-md-6) and a one-column layout on mobile screens (col-xs-12).

Use Flexible Images: Use CSS to make images flexible and adaptable to different screen sizes. For example:

img {
  max-width: 100%;
  height: auto;
}
* https://www.youtube.com/watch?v=_SyeUc6zlbs
* https://www.youtube.com/watch?v=NygNCmM_894
* https://www.youtube.com/watch?v=SDc6f7kE1cQ&t=24s
* https://www.youtube.com/watch?v=6L-PAmZajfA
* https://www.youtube.com/watch?v=HKyhE2cDvWk&list=PLlydFsFRbxJ2gVH-9l0SURE5LcbVWPSJk
* https://www.youtube.com/watch?v=r00bBWHUzy4
* https://www.youtube.com/watch?v=wsJIR9wML_A
* https://www.youtube.com/shorts/bm4uuzo4ZnU
* https://www.youtube.com/watch?v=YL4UKOPzZDQ






* TypeScript 
* type vs interface 
* 

JS:
https://www.youtube.com/watch?v=qcixpy3HQ9s&list=PLmcRO0ZwQv4QMslGJQg7N8AzaHkC5pJ4t&index=2
https://www.youtube.com/watch?v=-C_-f5aiWIY

https://medium.com/geekculture/flatten-array-of-array-in-javascript-microsoft-interview-question-345c71ff9ccd
https://mevasanth.medium.com/memoization-in-javascript-hot-topic-for-interview-815475544ab0
https://mevasanth.medium.com/hoisting-in-javascript-hot-topic-for-interview-43b463a6a77
https://javascript.plainenglish.io/problem-with-returning-values-from-async-await-function-javascript-e99c94a47ca5
https://mevasanth.medium.com/how-everything-is-object-in-javascript-a4164d7e6a2d
https://mevasanth.medium.com/prototype-and-protypal-inheritance-in-javascript-bb766097ac05
https://mevasanth.medium.com/how-everything-is-object-in-javascript-a4164d7e6a2d
https://javascript.plainenglish.io/array-push-in-javascript-is-it-deep-or-shallow-copy-90cd195ec5b7
https://javascript.plainenglish.io/react-native-making-get-request-to-display-the-image-f75d4338c5e2
https://mevasanth.medium.com/
https://medium.com/geekculture/my-interview-experience-at-reliance-jio-react-native-jio-money-2805086d851e
https://medium.com/geekculture/dont-skip-top-5-frontend-interview-topics-to-prepare-in-2022-8adc8801677e
https://mevasanth.medium.com/

https://www.youtube.com/watch?v=XBTJDpT2XaI (IMP)
https://www.youtube.com/watch?v=cBsB7hhOzQI&t=2s (IMP)
https://www.youtube.com/watch?v=KVbo-oj7TRA&list=PLlydFsFRbxJ3oz8syKnu8FVJLme2U0oYB (IMP)

Redux:
https://www.youtube.com/watch?v=1zCNdVhdvHE&t=38s&pp=ygUTcmVhY3QgbmF0aXZlIHR1cmluZw%3D%3D

https://github.com/ayush2390/Disney-Plus-Clone/tree/master/src/components
https://github.com/ayush2390/Youtube-Clone
https://github.com/ayush2390/Song-Player
https://github.com/ayush2390/Voice-Expense-Tracker
https://github.com/ayush2390/linkedin-clone
https://github.com/ayush2390/Exercise-App
https://github.com/ayush2390/Crypto-App
https://github.com/ayush2390/Ecommerce-Dashboard
https://github.com/Shreya-trivedi-20/Create-a-Login-Form-with-ReactJs-



Dot net core

OOPs
https://www.youtube.com/watch?v=OFuPd8YiiFQ

SQL: 
https://www.youtube.com/watch?v=bfDhm6tTXtU

Web API:
https://www.youtube.com/watch?v=XStpo9VlzCI

.NetCore:
https://www.youtube.com/watch?v=hZc2WjVtZ_Q&t=2284s
https://www.youtube.com/watch?v=nuryxBpJI_s&list=PLNV7L1YVu_jyMsQCjYuNG5PQMXMKPsePc
https://www.youtube.com/watch?v=ThZuctN0ARU
https://www.youtube.com/watch?v=Tm4-7b5cCTY
https://www.youtube.com/watch?v=q30WTvk4-HY&list=PL7HS9PmaJH_q8ZwV8P4mwJzSXZRTp3O3Y

https://www.youtube.com/watch?v=1r5cZ1eCPS8
https://www.youtube.com/watch?v=7AhmAfndAdU
https://www.youtube.com/watch?v=4DAit8nrt3M
https://www.youtube.com/watch?v=vzcdhhNP0dQ
https://www.youtube.com/watch?v=ZrK40mObjmQ&list=PLoJTJYl8DAG9rUlgtBsL4fSV0rBFdYy6i
https://www.youtube.com/watch?v=P_87g1Yd1Y0&list=PLMFjsJ2uRBq1oS0dh5WARF28BiiUKaCLM
https://www.youtube.com/watch?v=QJx4jWE6OyM
https://www.youtube.com/watch?v=YO8kMwrm1zo
https://www.youtube.com/watch?v=uCrZoGzQ48U
https://www.youtube.com/watch?v=S6oIyAz2Yeg&list=PLJhxHp6j1l-_VLWA8_WNEdPZOT_tBQbA4
https://www.youtube.com/watch?v=Sb2vbfGpAu4&list=PLJhxHp6j1l-8_kjEL2hVJDs0_4eJbHtWH
https://www.youtube.com/watch?v=eayAZhqRHv8&list=PLJhxHp6j1l---DH1o6lLZ-f24Bm4ZD8aU
https://www.youtube.com/watch?v=weRPPG6mOkw&list=PLJhxHp6j1l-9RHSkg_CZXZAI45aVmrQXD
https://www.youtube.com/watch?v=fpVqecTHK9o&list=PLJhxHp6j1l-8rPDhuiVf5UuDbTjh1DDZp
https://www.youtube.com/watch?v=ILalG3GU69A&list=PLJhxHp6j1l--55_lvr4A5IT9MqUzp_lY4
https://www.youtube.com/shorts/Y7JNfa9_PPk
https://www.youtube.com/watch?v=FJJlMBbhVoc&list=PLwLaCah3wxh0SkWtXUzUxjchJfpRtWSDd
https://www.youtube.com/watch?v=jS8H67kzuKs&list=PLh25VcpDK46v1zeEIwXNt9vtzLJ0h8lMx&index=3
https://www.youtube.com/@Interviewspreparation/shorts
https://www.youtube.com/watch?v=RXzFfiqBVhs
https://www.youtube.com/shorts/QeRwccaEtgU
https://www.youtube.com/watch?v=7myI-l3Mrec
https://www.youtube.com/watch?v=ThZuctN0ARU&t=353s
https://www.youtube.com/watch?v=sN48W9FoXrM
https://www.youtube.com/shorts/44SEtPgtuYY
https://www.youtube.com/shorts/ewrh71bFdEc
https://www.youtube.com/shorts/wl-6wAj3tgI
https://www.youtube.com/shorts/5v8XAschvfU
https://www.youtube.com/shorts/bn8jWIJPKjY
https://www.youtube.com/shorts/cYkfS15a0fc
https://www.youtube.com/shorts/UCpqX0Si5c0
https://www.youtube.com/shorts/hOwTTNoL9W8
https://www.youtube.com/shorts/nvLmdSx3SQQ
https://www.youtube.com/shorts/7Eq9CbLUOQk
https://www.youtube.com/shorts/uDt-iwKdiVA
https://www.youtube.com/watch?v=1r5cZ1eCPS8&t=3s
https://www.youtube.com/watch?v=n6MLHkSLWmQ
https://www.youtube.com/watch?v=zTuxpw4Azj8
https://www.youtube.com/watch?v=Xz_pdQ4y8HA
https://www.youtube.com/watch?v=tips4azosew&list=PLo4twE8XBOPyqBzRaCqParpeFu488rG-H
https://www.youtube.com/watch?v=xiXIRbRdQls&list=PLo4twE8XBOPy0HRKBPx6ktpQoJeciFd-g



https://www.udemy.com/course/csharp-oops-mvc-asp-dotnet-core-webapi-sql-questions-mock-interviews/?referralCode=6922C9482CFE5A11B863




AWS
https://www.youtube.com/results?search_query=aws+interview+questions+and+answers+for+experienced&sp=EgIIBQ%253D%253D
https://www.google.com/search?q=list+of+main+interview+questions+on+aws&oq=list+of+main+interview+questions+on+aws+&aqs=chrome..69i57j33i160l5j33i22i29i30l3.12871j0j7&sourceid=chrome&ie=UTF-8#ip=1

https://www.google.com/search?sxsrf=APwXEddhKN3fPh1Y6lV8_uaafj88EegJCA:1681924379839&q=AWS+scenario+based+interview+questions&sa=X&ved=2ahUKEwin48vJuLb-AhW_3jgGHQzQDSYQ1QJ6BAgpEAE&biw=1280&bih=631&dpr=2

https://github.com/kcr123/AWS-Interview-Questions-Answers/tree/master/Interview-Questions
https://gist.github.com/devops-school/12ad7130c35b910eda38271380bbe186
https://github.com/vladimirmukhin/aws-interview-questions
https://gist.github.com/devops-school/48f41eabce1fb1165bc9711c7dff513c
https://gist.github.com/devops-school/d20ded19dc3f661f08f0faaf7ce9a9e5

Node js:
https://www.youtube.com/watch?v=S6Yd5cPtXr4&list=PL0g02APOH8okXhOQLOLcB_nifs1U41im5&index=1

Micro services
https://www.youtube.com/watch?v=EXDkgjU8DDU&list=PLaLqLOj2bk9ZV2RhqXzABUP5QSg42uJEs
https://www.youtube.com/watch?v=_fK8g2dhzvU&list=PLIGDNOJWiL19WHIxJ0Q4aP4X3oljPha5n&index=1

Angular:
* what is angular and features/building blocks 
* AngularJs vs Angular
* Advantages and disadvanatges 
* Angular material 
* Angular CLI
* Typescript 
* package.json
* unit test library 
* ng test and ng e2e
* upgrade angular apps
* lint
* Unsubscribe observables
* Optimize angular app
* ngZone (+1)
* Angular Modules 
* ngModules
* Angular components
* @component decorator 
* component constructor vs ngOnit
* ngClass - how to use based on condition 
* Angular decorator
* RxJS - library 
* Rxjs - Subscribing 
* Rxjs - observable and observer
* Rxjs - promise vs observable 
* Rxjs - multicasting 
* Rxjs - error handling in observable 
* Angular Router 
* Angular Router imports
* Angular Router outlets
* Angular Router link
* Angular Router link active
* Angular Router state
* Angular Router events
* Activated Route
* Angular Directives and types 
* component vs directive 
* ngFor, ngIf, 
* Angular HTTP
* Angular Pipes and pipes parameter, chain pipes, custom pipe, 
* Angular templates 
* data binding 
* Subject vs Observable 
* async pipe
* for in vs for of 
* Generic types in angular 
* Use of formBuilder and formGroup 
* How can we add dynamic validation in form 
* Nested reactive form 
* formarray in reactive form angular 
* Change detector class in angular 
* ngOnChanges vs ngDocheck
* 10 rxjs operators
* shared module 
* viewchild in angular 
* use of interface in angular 
* what are the entry components in angular
* How many ways we can pass data to multiple components 
* resolver in angular 
* JIT vs AOT 
* what is lazy loading 
* HTTP interceptor
* use of trackBy in *ngFor
* NGCC in angular 
* 



https://kinsta.com/blog/angular-vs-react/#:~:text=1.-,Similarities,a%20piece%20of%20a%20UI.
https://programmingwithmosh.com/react/react-vs-angular/
https://www.simform.com/blog/angular-vs-react/
https://appinventiv.com/blog/react-vs-angular/
https://www.interviewbit.com/blog/angular-vs-react/


https://www.youtube.com/watch?v=qt8bB84PnQs&list=PLp50dWW_m40VPvdJ7ph1CU8xnQkppnSAE (***)


https://www.youtube.com/watch?v=KNmtXLOnwy8

https://www.youtube.com/watch?v=uJ-TDU189C4 (***)
https://www.youtube.com/watch?v=9cB4FVu7Yew
https://www.youtube.com/watch?v=4UgronUwjsU
https://www.youtube.com/watch?v=V7Qjq6e66qk
https://www.youtube.com/watch?v=IAL9qr6Yxmc
https://www.youtube.com/watch?v=L9EXIhabTMs
https://www.youtube.com/watch?v=rKckYOT_JJs
https://www.youtube.com/watch?v=GfDlxfzHi6k
https://www.youtube.com/watch?v=FwQ7ie-6Nb8
https://www.youtube.com/watch?v=ehaT1KFp0_Y
https://www.youtube.com/watch?v=8cUwGfTVBYM
https://www.youtube.com/watch?v=bwRfGlpd1vo
https://www.youtube.com/watch?v=idVPwX0yHaY
https://www.youtube.com/watch?v=ehaT1KFp0_Y&list=PLAgJNt0flqKdcAtyFCyZrtg9CmCqxqgqg
https://www.youtube.com/watch?v=MSAiCicJWQA
https://www.youtube.com/watch?v=2T3F5TfrYwI
https://www.youtube.com/watch?v=zLAFAS5YF2M
https://www.youtube.com/watch?v=VCy0Ct0NXik
https://www.youtube.com/watch?v=-1HjQkARnso
https://www.youtube.com/watch?v=PevqeI-Hxzs
https://www.youtube.com/watch?v=zddN_4mudnw
https://www.youtube.com/watch?v=LmBULInvDHM
https://www.youtube.com/watch?v=FhUr3O17418
https://www.youtube.com/watch?v=MLwC4-_6g0M
https://www.youtube.com/watch?v=uJ-TDU189C4
https://www.youtube.com/watch?v=CUvHGwY5EUM
https://www.youtube.com/watch?v=IAL9qr6Yxmc&t=14s
https://www.youtube.com/watch?v=RW6kFpqqcco
https://www.youtube.com/watch?v=NjjSz6kC8mw&list=PLkTWTNAkAFOkZyh9zNjnrQWP8gInn0FVy
https://www.youtube.com/watch?v=q3qoDlbX0NM&list=PL_qizAfcpJ-NsD2_46FOYIJAi68tIRFTU
https://www.youtube.com/results?search_query=angular+interview+questions+
https://www.youtube.com/watch?v=V7Qjq6e66qk
https://www.youtube.com/watch?v=8HaLNtAWB6M
https://www.youtube.com/watch?v=xVkDNQ6H7A8
https://www.youtube.com/watch?v=x38CgkwnZyU
https://www.youtube.com/watch?v=ehaT1KFp0_Y&list=PLAgJNt0flqKdcAtyFCyZrtg9CmCqxqgqg

