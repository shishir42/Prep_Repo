***********
1.Modules - like a namespace 

Every statement in file is wrapped under a module and if you want to access then import and if you need to export

example export.sum = (a,b)=> a+b

CommonJS module
ESJS module

package.json
{
  "type":"module" //ESModule
}

2. nodemon

3. npm run start

4. npm outdated

5. node api - get, post, patch, put, delete

6. express 

7. middleware - 
    * Execute any code
    * Make changes to the request and response object
    * End the request-response cycle
    * Call the next middleware in the stack

8. express.json() -> read body 

9. morgan -> third party middleware (for logger)

10. url parameter -> '/product/:id'

11. mvc

12. router

13. dotenv library 

14.MERN stands for MongoDB, Express, React, Node, 

15. cors middleware

Scalable Apps:
https://www.youtube.com/watch?v=RCyR5_9djik&list=PLrwNNiB6YOA3xc1dfQpHuaU8HsKxkEgiQ
https://www.youtube.com/watch?v=6lHvks6R6cI
https://www.youtube.com/watch?v=nC5UbrpbD5E
https://www.youtube.com/watch?v=9RLeLngtQ3A
https://www.youtube.com/watch?v=w1IzRF6AkuI
https://www.youtube.com/watch?v=3g7EzpF2jaE
https://www.youtube.com/watch?v=lB3Ip0Yn-Zs
https://www.youtube.com/watch?v=11axb6y_MTE
https://www.youtube.com/watch?v=gzIcGhJC8hA
https://www.youtube.com/watch?v=INM6TybFV9Q


Microservices:
https://www.youtube.com/results?search_query=microservices+in+node+js


real time:
https://www.youtube.com/watch?v=RqiU5nzj_nU&list=PLXQpH_kZIxTVRmXQN9J0Az76te5mAreLV


Auth:
https://www.youtube.com/watch?v=SnoAwLP1a-0&list=PL4cUxeGkcC9iqqESP8335DA5cRFp8loyp
https://www.youtube.com/watch?v=KiNBhjeMI4Y&list=PLdHg5T0SNpN0ygjV4yGXNct25jY_ue70U
https://www.youtube.com/watch?v=mbsmsi7l3r4
https://www.youtube.com/watch?v=S20PCL9e_ks
https://www.youtube.com/watch?v=OWeruyqhiTo
https://www.youtube.com/watch?v=b4H9EOKc910
https://www.youtube.com/watch?v=ICMnoKxlYYg

***********
A blocking function in Node.js is a function that can potentially block the execution of the entire Node.js process until it completes its operation. This means that while the blocking function is executing, the event loop, which is responsible for handling incoming requests and executing callback functions, is paused, and no new requests can be handled.

Some examples of blocking functions in Node.js include synchronous file I/O operations and network operations that don't use asynchronous APIs. If these operations take a long time to complete, it can lead to poor performance and unresponsiveness in a Node.js application.

To avoid blocking the event loop, Node.js provides asynchronous APIs for most I/O operations, which allow the program to continue executing while waiting for I/O operations to complete. It's generally recommended to use these asynchronous APIs instead of blocking functions in Node.js to ensure that the application remains responsive and scalable.


***********

async and await are keywords introduced in ECMAScript 2017 (ES8) that allow developers to write asynchronous code in a more synchronous style. They provide a way to simplify the use of Promises, which are a standard feature of JavaScript used for managing asynchronous operations.

The async keyword is used to declare a function as asynchronous. When a function is declared as async, it returns a Promise that resolves to the return value of the function. The function can use the await keyword to wait for a Promise to resolve before continuing execution.

Here's an example of an async function that fetches data from an API using the fetch() method:

async function fetchData() {
  const response = await fetch('https://example.com/api/data');
  const data = await response.json();
  return data;
}

In this example, the fetchData() function is declared as async, which allows it to use the await keyword to wait for the response from the API before continuing. The fetch() method returns a Promise that resolves to a Response object, which is then converted to JSON using the json() method, which also returns a Promise. By using await with both of these Promises, we can wait for the data to be fetched and parsed before returning it from the function.

Using async and await can make asynchronous code easier to read and write, and can help avoid the "callback hell" that can occur when working with nested callbacks. However, it's important to keep in mind that async and await still rely on Promises under the hood, and care must be taken to handle errors and ensure that Promises are properly resolved or rejected.

*********

Explain REPL in Node.js.

REPL stands for Read-Eval-Print Loop, which is a way of interacting with a programming language through a command-line interface. In Node.js, the node executable comes with a built-in REPL that allows you to interactively experiment with JavaScript code.

When you start the Node.js REPL, you'll see a prompt (> by default) where you can enter JavaScript expressions and statements. When you press Enter, the REPL will evaluate the code and display the result.

***********

Node.js is an open-source, cross-platform, server-side runtime environment for executing JavaScript code. It is built on top of the V8 JavaScript engine, which is the same engine used by the Google Chrome browser to execute JavaScript code.

Node.js was designed to provide a scalable and efficient platform for building network applications, such as web servers, real-time chat applications, and streaming applications. It provides a non-blocking I/O model that allows multiple requests to be processed concurrently, without blocking the execution of other requests. This makes it well-suited for building applications that need to handle a large number of concurrent connections, such as web servers.

Node.js also provides a rich set of built-in modules and APIs for working with file systems, streams, network protocols, and more. In addition, it has a large ecosystem of third-party modules and packages available through the Node Package Manager (NPM), which makes it easy to find and use code written by other developers.

Overall, Node.js is a powerful and flexible platform for building server-side applications using JavaScript, and it has become a popular choice for building a wide range of web and network applications.

Node.js is cross-platform and we can run it on Windows, Linux, Unix, and macOS.

It is different from other JavaScript environments because it is asynchronous and event-driven.

Node.js is open-source and cross-platform.

Node.js developers can build various applications, including web applications, chat applications, real-time applications, streaming applications, APIs, and desktop applications, etc.

I/O stands for input/output, which helps write and read files and network operations.

Node.js supports two categories of data type - primitive and non-primitive.

Asynchronous non-blocking and synchronous blocking are the two different types of API functions that Node.js supports.

Google uses V8 for Node.js because it is faster and more efficient. It compiles the JavaScript code directly into machine code.

Node.js is not compatible with CPU-intensive applications.

Blocking code is code that cannot be executed until the current code is completely executed.

The V8 library provides Node.js with the JavaScript engine.

It is fast, scalable, open-source, and asynchronous.

The tasks include - intensive CPU computation, I/O operations, GUI programming, and database operations can be done asynchronously with the help of an event loop.

The different types of security implementations within Node.js include error handling, authentications and authorization, data sanitization, encryption, and logging and monitoring.

Present in the root directory of a Node application/module, package.json defines the properties of a package including dependencies, metadata, and configuration options.

Node.js uses the Google V8 JavaScript engine to convert JS code to C++.

Event programming is programming paradigm that uses events to trigger actions. An event can be generated by the user, by the system, or by the program itself.



*****

There are several key features that make Node.js different from other server-side technologies:

Asynchronous I/O: Node.js is built around an event-driven, non-blocking I/O model, which means that it can handle a large number of concurrent connections without blocking the execution of other requests. This makes it well-suited for building real-time applications, such as chat apps and streaming services.

JavaScript on the server-side: Node.js uses JavaScript as its programming language, which means that developers can use the same language on the server-side as they do on the client-side, simplifying the development process and reducing the learning curve.

Single-threaded but highly scalable: While Node.js runs on a single thread, it can handle a large number of concurrent connections by delegating I/O operations to the operating system, allowing other requests to be processed while waiting for I/O to complete. This makes it highly scalable and efficient.

Rich set of built-in modules: Node.js provides a rich set of built-in modules and APIs for working with file systems, streams, network protocols, and more, which makes it easy to build a wide range of applications without needing to rely on external libraries or tools.

Large and active ecosystem: Node.js has a large and active community of developers and users, which has resulted in a rich ecosystem of third-party modules and packages available through the Node Package Manager (NPM), making it easy to find and use code written by other developers.

Overall, Node.js is a unique and powerful platform for building server-side applications that emphasizes performance, scalability, and ease of use, and has become a popular choice for building a wide range of web and network applications.

*********

While Node.js has many benefits, it also has some potential disadvantages, including:

Limited multi-threading: Node.js uses a single-threaded event loop model, which can limit its ability to handle computationally intensive tasks or scale to handle large amounts of traffic. While Node.js can handle high traffic loads, it may require additional workarounds or external tools to scale effectively.

Callback hell: In asynchronous programming, callbacks are used to handle asynchronous tasks. However, this can lead to callback hell, a situation where the code becomes difficult to read and maintain due to the complexity of nested callbacks. This issue can be addressed by using promises, async/await, or other tools.

Debugging issues: Debugging Node.js applications can be challenging, as the stack trace generated by the event loop can be difficult to interpret. Additionally, errors that occur within asynchronous code may not be caught by traditional error handling methods.

Limited standard library: While Node.js has a large and active community that provides many useful packages through npm, its standard library is relatively small compared to other programming languages. This can mean that developers may need to rely on third-party packages for certain functionality.

Security concerns: Like any web application, Node.js applications are susceptible to security vulnerabilities. The use of external packages can also introduce security risks, as packages may contain vulnerabilities or malicious code.

******

Give some examples of async functions.

Some examples of async functions are setTimeout(), setInterval(), and process.nextTick()

In Node.js, process.nextTick is a method that allows a function to be scheduled to run at the end of the current event loop iteration, immediately after the current function completes execution. This means that the function passed to process.nextTick will be executed before any other I/O events or timers scheduled in the current event loop iteration.

console.log('Start');

process.nextTick(() => {
  console.log('Next Tick');
});

console.log('End');


Output
Start
End
Next Tick

This is because the function passed to process.nextTick is executed at the end of the current event loop iteration, after the console.log('End') statement has completed execution.

One common use case for process.nextTick is to defer the execution of a function until after the current code has completed executing. This can be useful when you need to ensure that certain operations are performed in the correct order, or when you want to avoid blocking the event loop with long-running operations.

It's worth noting that process.nextTick is not a replacement for setTimeout or setImmediate. process.nextTick is executed before any I/O events or timers, while setImmediate is executed immediately after I/O events, and setTimeout is executed after a specified delay. The choice of which method to use depends on the specific requirements of your application.

************

Several factors can cause server latency and prevent scalability in Node.js. Some of the most common ones include:

Blocking I/O: Blocking I/O operations can cause the server to become unresponsive while waiting for I/O operations to complete. This can be especially problematic in Node.js, which is designed to handle many concurrent connections. To avoid this, Node.js provides non-blocking I/O operations.

Inefficient code: Inefficient code can cause unnecessary processing and slow down the server. This can be caused by poor algorithmic choices, excessive use of synchronous operations, or inefficient data structures.

Insufficient hardware resources: Insufficient hardware resources, such as CPU, memory, or network bandwidth, can cause the server to become overloaded and unresponsive. This can be especially problematic in high traffic scenarios.

Improper configuration: Improperly configured servers can cause performance issues. This can be caused by incorrect network settings, improper load balancing, or other misconfigurations.

************

Ajax is a client-side technology used to make web pages more interactive and dynamic, while Node.js is a server-side technology used to build scalable, high-performance web applications.

**********

Non-blocking in Node.js means that the program can continue to execute other code even while waiting for I/O operations to complete.

**********

Two input arguments for asynchronous queue are concurrency value and task function.

**********

It is possible to run external processes with Node.js. This can be done with the help of the child_process module.

**********

The fs module is used to create and manipulate files. It also provides an API for interacting with the file system.

**********

The os module provides a set of tools for interacting with the operating system. It provides an API for getting information about the system including memory, processor, file system, and network interfaces.

**********

Routing is a process where you associate HTTP request to a URL path or specific routes. When a request matches one of these routes, a corresponding handling function is used. Routing is a robust mechanism that enables you to define how an application handles incoming requests.

**********

How does Node.js handle concurrency if it is single-threaded?

Although Node.js is single-threaded, it still supports concurrency through an event-driven, non-blocking I/O model.

In a typical web server, when a request is received, a new thread is spawned to handle that request. This can quickly lead to scalability issues when dealing with a large number of concurrent requests.

In contrast, Node.js uses a single thread to handle all requests. When a request is received, it is added to an event queue, and the main thread continues to process the next request in the queue. When the previous request is completed (e.g., a database query is finished, or a file has been read), the main thread is notified, and the callback function for that event is executed.

This event-driven approach allows Node.js to handle a large number of concurrent requests with relatively low resource usage, as there is no need to spawn a new thread for each request. Additionally, non-blocking I/O operations are used to avoid blocking the event loop and allowing the main thread to continue processing other requests.

Node.js also provides a cluster module that allows developers to create child processes that can share the same port as the parent process, thus allowing for even more efficient use of system resources.

Overall, while Node.js is single-threaded, its event-driven, non-blocking I/O model allows for efficient handling of concurrency and scalability in web applications.

***********

A Node-Inspector is a debugging tool that allows developers to inspect and debug the code of an application through a graphical user interface.

***********

The Dgram is an in-built module. It is useful in implementing UDP datagram packets.

***********

You can import the buffer class without the buffer module.

***********

The emit() function is used to fire an event.

***********

In Node.js, a callback function is a function that is passed as an argument to another function and is called back at a later point in time. The purpose of using a callback function is to handle asynchronous operations.

In asynchronous programming, a function that initiates an asynchronous operation returns immediately while the operation continues in the background. When the operation is completed, the callback function is called with the result of the operation.

***********

There are four types of streams in Node.js: readable, writable, duplex, and transform.

Readable: The readable streams are used to read data from a specific source.

Writable: These streams are utilized for writing data to the destination.

Duplex: The duplex streams are used for both reading and writing data.

Transform: The transform stream enable the data to be transformed while it is being read or written. For example, you can use transform stream for data compression or data encryption as it is transmitted over the network.

***********

Task function and concurrency value are the two arguments async.queue takes.

***********

Error-first callbacks are used to pass data and identify if an error has occurred.

***********

In Node.js, a child process occurs when a new process is created using the child_process module. This module provides functionality to spawn child processes in a similar way to the fork() system call in Unix.

***********

Libuv is a library that provides an event loop and a thread pool for handling asynchronous operations seamlessly. It helps in handling file systems, child processes, files, DNS, etc.

***********

The express framework is a web application framework that helps you easily create server-side applications.

***********

How to scale a Node.js application?

Scaling a Node.js application involves increasing its capacity to handle more traffic, users, and data without compromising its performance or stability. Here are some ways to scale a Node.js application:

Vertical Scaling - This involves adding more resources to your existing server or upgrading to a bigger server with more CPU, RAM, and storage. This approach can help handle more traffic, but it has its limits.

Horizontal Scaling - This involves adding more servers to handle the load. You can use load balancing techniques to distribute the traffic evenly across the servers.

Caching - Caching can help reduce the load on your server by storing frequently accessed data in memory or on disk. This can be done using tools such as Redis, Memcached, or Varnish.

Asynchronous Programming - Node.js is designed to be non-blocking and asynchronous, allowing it to handle a large number of concurrent connections. Using asynchronous programming techniques such as callbacks, promises, and async/await can improve your application's scalability.

Database Optimization - Optimizing your database can help improve the performance and scalability of your application. You can use techniques such as indexing, sharding, and partitioning to distribute the load across multiple databases.

Containerization - Containerizing your Node.js application using tools such as Docker or Kubernetes can help simplify deployment, improve scalability, and increase fault tolerance.

CDN (Content Delivery Network) - CDN can help offload the serving of static files such as images, CSS, and JavaScript files to a network of distributed servers, reducing the load on your application server.

***********

Node.js is a JavaScript runtime environment that allows developers to run JavaScript code outside of a web browser. Here are the steps involved in how Node.js works:

Parsing: When you run a Node.js application, the code is first parsed by the V8 JavaScript engine. V8 compiles JavaScript code into machine code that can be executed by the computer's CPU.

Loading: Once the code is parsed, Node.js loads the necessary modules and libraries required by the application. Node.js has a built-in module system that makes it easy to load and use external modules.

Execution: After the modules are loaded, Node.js begins to execute the code line by line. Node.js uses an event-driven, non-blocking I/O model, which means that it can handle multiple requests simultaneously without blocking the main thread.

Callbacks: Node.js uses callbacks to handle asynchronous operations. When an asynchronous operation is initiated, Node.js continues executing the code and returns a callback function to be executed when the operation is complete.

Event Loop: Node.js has an event loop that constantly checks for pending events and executes their associated callbacks. When a callback function is executed, it may initiate further asynchronous operations, and the process repeats.

Garbage Collection: Node.js has a built-in garbage collector that automatically frees up memory that is no longer in use. This helps prevent memory leaks and keeps the application running smoothly.

Overall, Node.js allows developers to write high-performance, scalable server-side applications using JavaScript, a language that is familiar to many web developers.


***********

Sure, here are the steps involved in Node.js workflow when a client sends a request in terms of the Event Loop and Event Queue:

Event Loop: The Event Loop is continuously running in the background, waiting for events to be added to the Event Queue.

Request Handling: When a client sends a request to a Node.js web application, the request is received by the web server, and a new event is added to the Event Queue.

Event Queue: The Event Queue holds all the events that need to be processed by the Event Loop.

Event Loop Checks: The Event Loop checks the Event Queue for new events and retrieves the first event in the queue.

Request Parsing: The event retrieved from the Event Queue is a request event that contains information about the incoming request, such as the HTTP method, URL, headers, and any data sent with the request.

Routing: The Node.js web application uses a routing mechanism to determine which route or endpoint the request should be sent to.

Request Processing: Once the route or endpoint is determined, the Node.js application executes the code to process the request. This could involve database queries, file system operations, or other I/O operations.

Callback Function: When the request processing is complete, the Node.js application returns a response object to the client, and a callback function is added to the Event Queue.

Event Loop Callback Execution: The Event Loop retrieves the callback function from the Event Queue and executes it. The callback function may involve additional I/O operations or add new events to the Event Queue.

Response: The client receives the response object from the Node.js application, and the request is complete.

Overall, the Event Loop and Event Queue in Node.js allow for efficient handling of multiple requests simultaneously and prevent blocking, ensuring that the application remains responsive and performant.


***********

next Tick() postpones the execution of action until the next pass around the event loop, or it simply calls the callback function once the event loop's current execution is complete, whereas setImmediate() executes a callback on the next cycle of the event loop and returns control to the event loop for any I/O operations.

***********

What is the difference between fork() and spawn() methods in Node.js?
Both fork() and spawn() are methods in Node.js that are used to create child processes, but there are some key differences between them.

fork(): The fork() method is used to create a new Node.js process that runs the same code as the parent process. This is typically used for creating multiple instances of the same application, such as in a cluster environment. The child process created with fork() is a complete copy of the parent process, including all its resources, so it can share variables and state with the parent process.

spawn(): The spawn() method is used to create a new process and execute a command in that process. This is typically used for executing external programs or shell commands. Unlike fork(), the child process created with spawn() is a completely separate process from the parent process, and it does not share any resources with the parent process. The child process can communicate with the parent process using streams or events.

fork() only works on Node.js processes, whereas spawn() can be used to execute any command or program that is available on the system.

fork() creates a new process with the same Node.js runtime environment as the parent process, whereas spawn() creates a new process with its own environment and can be used to run programs written in other languages.

fork() is typically used for creating child processes that are closely related to the parent process, whereas spawn() is typically used for executing external programs or shell commands that are independent of the parent process.

Overall, fork() and spawn() are both useful methods for creating child processes in Node.js, but they are used in different scenarios depending on the requirements of the application.

***********

Piping is a mechanism used to connect the output of one stream to another stream. It is normally used to retrieve data from one stream and pass output to another stream

***********

Explain the steps how “Control Flow” controls the functions calls?
Control the order of execution
Collect data
Limit concurrency
Call the following step in the program.


***********


setTimeout/clearTimeout – This is used to implement delays in code execution.
setInterval/clearInterval – This is used to run a code block multiple times.
setImmediate/clearImmediate – Any function passed as the setImmediate() argument is a callback that's executed in the next iteration of the event loop.
process.nextTick – Both setImmediate and process.nextTick appear to be doing the same thing; however, you may prefer one over the other depending on your callback’s urgency. 


***********

Sure, here are the steps involved in the event loop in Node.js:

The event loop starts: When Node.js starts up, it initializes the event loop.

Check the event queue: The event loop checks the event queue for any pending events. If there are no events in the queue, the event loop waits until new events are added.

Process the event: When an event is found in the event queue, the event loop retrieves the event and processes it. The event may trigger a callback function, a promise resolution, or an I/O operation.

Execute the callback function: If the event triggers a callback function, the event loop executes the callback function, passing in any necessary arguments. The callback function may execute synchronous or asynchronous code, and may also add new events to the event queue.

Handle I/O operations: If the event triggers an I/O operation, the event loop schedules the I/O operation to be executed on a separate thread, and waits for the thread to complete.

Execute the I/O callback: When the I/O operation is complete, the event loop retrieves the I/O callback from the event queue and executes it, passing in any necessary arguments. The I/O callback may also add new events to the event queue.

Check for Timers: The event loop checks the timers to see if any timers have expired. If a timer has expired, the event loop adds the timer's callback function to the event queue.

Close events: If an event indicates that a resource, such as a file or network socket, is being closed, the event loop performs the necessary cleanup actions.

Repeat: Once all pending events have been processed, the event loop repeats the entire process, checking the event queue for new events and executing any pending callbacks.

The event loop in Node.js is a fundamental component of its non-blocking I/O architecture. By efficiently processing events in a loop, Node.js can handle multiple requests simultaneously without blocking, ensuring that the application remains responsive and performant.

***********

An Event Emitter is a core module in Node.js that provides an implementation of the Observer pattern, which allows objects to subscribe to and receive notifications about events that occur in another object. In other words, it provides a way for objects to communicate with each other in an asynchronous manner.

The EventEmitter module provides an event-driven architecture, where certain actions or events can be subscribed to by other objects or functions, and then emitted when they occur. This allows for a decoupled architecture where different parts of an application can communicate with each other without being tightly coupled.

Here's an example of using the EventEmitter module in Node.js:

const EventEmitter = require('events');

// create an instance of the EventEmitter
const myEmitter = new EventEmitter();

// subscribe to the 'greet' event
myEmitter.on('greet', (name) => {
  console.log(`Hello, ${name}!`);
});

// emit the 'greet' event
myEmitter.emit('greet', 'John');

In this example, we first import the EventEmitter module and create an instance of it called myEmitter. We then subscribe to the 'greet' event using the on() method, which takes two arguments: the name of the event to subscribe to, and a callback function to execute when the event is emitted. In this case, the callback function simply logs a greeting to the console.

Finally, we emit the 'greet' event using the emit() method, which takes one or more arguments representing the data to be passed to the event subscribers. In this case, we pass in the name 'John' as the argument.

When we run this code, the output will be Hello, John!, as the 'greet' event is emitted and the callback function is executed.




***********

 Enhancing Node.js performance through clustering.
Node.js applications run on a single processor, which means that by default they don’t take advantage of a multiple-core system. Cluster mode is used to start up multiple node.js processes thereby having multiple instances of the event loop. When we start using cluster in a nodejs app behind the scene multiple node.js processes are created but there is also a parent process called the cluster manager which is responsible for monitoring the health of the individual instances of our application.




***********

How many Node object methods are available?
18


***********

How to check equality of two nodes?
isEqualNode()

**********

In Node.js, the event loop is responsible for handling asynchronous operations such as I/O operations, timers, and callbacks. It is a loop that constantly checks if there are any pending callbacks in the event queue and processes them one by one. This allows Node.js to execute multiple operations simultaneously without blocking the main thread.

The event loop in Node.js has a set of phases that determine the order in which events are processed. These phases are:

Timers: This phase executes callbacks scheduled by setTimeout() and setInterval() functions.

Pending callbacks: This phase executes I/O callbacks deferred to the next loop iteration.

Idle, prepare: This phase is used internally by Node.js to prepare and poll events.

Poll: This phase retrieves new I/O events and executes their callbacks. If there are no pending callbacks, Node.js will block here.

Check: This phase executes callbacks set by setImmediate().

Close callbacks: This phase executes close callbacks, such as socket.on('close', ...).

When a promise is resolved, its callback is added to the microtask queue. Microtasks have a higher priority than callbacks in the event queue, and are executed immediately after the current operation is completed and before the next event loop cycle starts. This means that if a promise is resolved while the event loop is executing callbacks, its callback will be executed before any new callbacks are processed.

Similarly, when setTimeout() is called, the callback is added to the event queue with a timestamp indicating when it should be executed. When the timer expires, the callback is added to the callback queue and processed in the next event loop cycle during the "Timers" phase.

In summary, promises have a higher priority than callbacks in the event queue and are executed before any new callbacks are processed. However, they have a lower priority than the currently executing operation and will not interrupt it. setTimeout() callbacks are processed during the "Timers" phase of the event loop, according to their specified timeout value.





