[ REST API - Best Practices ]

[1.] Use descriptive and meaningful resource naming -
/users, /products, /orders

[2.] Follow the principles of the HTTP methods -
GET /users, POST /products, PUT /users/{id}, DELETE /orders/{id}

[3.] Utilize HTTP status codes correctly -
200 OK, 201 Created, 400 Bad Request, 404 Not Found etc.

[4.] Provide comprehensive and clear documentation for your API -
Detailed API documentation with usage examples, parameter descriptions, and response formats.

[5.] Use versioning to manage API changes -
/v1/users, /v2/products

[6.] Design your API to be stateless -
Authenticate each request with an access token rather than relying on server-side sessions.

[7.] Implement proper error handling -
{ "error": "Invalid request body" } with an appropriate HTTP status code.

[8.] Use appropriate authentication and authorization mechanisms -
Implement OAuth 2.0 or JWT-based authentication and define roles/permissions for authorized users.

[9.] Implement rate limiting and throttling -
E.g. Allow a maximum of 100 requests per hour for a particular API endpoint per client.

[10.] Utilize caching mechanisms -
Set appropriate Cache-Control and ETag headers for responses that can be cached.

[11.] Follow the principles of HATEOAS -
Include hyperlinks and resource links in API responses for easy traversal and discovery.

[12.] Use pagination techniques -
Implement pagination with query parameters like page and limit to retrieve subsets of data.

[13.] Implement input validation -
Validate request payloads for required fields, data types, and data format.

[14.] Design your API to be idempotent -
Ensure that multiple identical requests have the same effect as a single request.

[15.] Use appropriate content types -
Set Content-Type: application/json for JSON payloads or Content-Type: application/xml for XML payloads.

[16.] Support content negotiation -
Accept and return multiple representation formats based on the Accept header.

[17.] Consider implementing request/response compression -
Compress response payload using gzip encoding when the client supports it.

[18.] Provide filtering, sorting, and searching capabilities -
Allow clients to filter results based on query parameters like filter, sort, or search.

[19.] Implement proper version control for API documentation -
Maintain a separate versioned documentation for each API version.

[20.] Support graceful handling of deprecated API endpoints or features -
Clearly communicate deprecation, provide migration guides, and offer alternative endpoints.

[21.] Implement proper logging and monitoring -
Log API requests, errors, and performance metrics. Set up monitoring tools for proactive detection of issues.

[22.] Follow RESTful URI conventions -
Use hierarchical URIs like /users/{id}/orders to represent resource relationships.  


Stateful vs stateless
Explain http methods 
Explain http status code 
explain URI - uniform resource identifiers identify every resource in the REST architecture 
What are the best practices in making the URI for RESTful web services 
REST vs SOAP 
REST vs ajax
What are some tools used to develop and test REST APIs-> Postman
example of REST API-> 
Advantage 
1. Easy to learn 
2. Wide range of data transfer 
3. Statelessness 
4, Scalability 

Disadvantage:
1. Lack of built-in security 
2. Need to be versioned for backwards compatibility 
3. Consistency in URI difficult to maintain for complex projects

<protocol>://<service>/<ResourceType>/<ResourceId>

Get, Head, options are safe and idempotent methods where as Put and delete methods are only idempotent. Post and patch methods are neither safe nor idempotent

https://www.linkedin.com/feed/update/urn:li:activity:7064106120977502208/


Principle:
1. Client-server decoupling 
2. Uniform interface
3. Stateless
4. Layered System
5. Cacheable 

API vs web service


Idempotent methods: Methods that return the same outcome irrespective of how many times the same request has been made 

HTTP response status 
1xx -> (information response) the request was received, continuing process
2xx -> (successful) the request was successfully received, understood and accepted 
3xx -> (redirection) further action need to be taken to complete the request
4xx -> (client side error) the request contains bad syntax or cannot be fulfilled
5xx -> (server error) the server failed to fulfill a valid request 

Authentication mechanism -> oAuth, Basic Authentication (base64 encoding), 2F Authentication 

How to secure REST api 
1. Authentication and authorization 
2. Validation 
3. Encryption 
4. Rate-limiting 
5. No sensitive information in URI 


GET used to retrieve
POST is used to save
PUT is used to update
DELETE is used to delete
PATCH is lighter version of PUT , it gives us the facility to update just a specific information instead of updating all data.

In CRUD operations
C stands for create : POST
R stands for read : GET
U stands for update : PUT/PATCH
D stands for delete : DELETE

Safe or Unsafe Methods?
A method is known as safe method if it doesn't change the resource representation.

GET is a safe method and PUT/POST/PATCH/DELETE are not methods.

What is method Idempotency?
If calling a method multiple times doesn't effect our data it is idempotent.

GET/PUT/DELETE methods are idempotent and POST/PATCH are non idempotent.

Let's say you have added someone as friend, suppose facebook used a post request to save them as your friend. What if we send that request 10 times then it would be weird when you see a same person 10 times in your friends list.

Suppose you were updating facebook profile name, even if you update it n times it will set it same, so no problem, sending a request to update n time is problem obviously but for idempotent POV no problem.

You were going to delete a record against a specific Id so record would be deleted first time then after that even if you make n requests no harm.

9 HTTP Request Methods You Should Know About:

- GET
- POST
- PUT
- DELETE
- HEAD
- PATCH
- CONNECT
- OPTIONS
- TRACE

HTTP request methods are essential for performing specific actions on the client-side.

While you may not use all of them daily, it's still important to know what they do. Let's take a closer look at what they do.

üåü GET:

The GET method is used to request a representation of the specified resource from the server. GET requests should only retrieve data, not modify it. Think of it like browsing through your LinkedIn feed.

‚úâÔ∏è POST:

The POST method sends data to the server with the Content-Type header specifying the type of the request's body. Submitting a contact form is an example of a POST request.

‚õ≥Ô∏è PUT:

The PUT request method either creates a new resource or replaces the target resource's representation with the request payload. Unlike POST, PUT is idempotent, meaning multiple calls produce the same result.

‚ùå DELETE:

The DELETE request method removes the specified resource from the server. When you delete a photo from social media, a DELETE request is used.

üòä HEAD:

The HEAD method requests the headers that would be returned if the URL of the HEAD request had been requested with the HTTP GET method instead. HEAD requests can check file size without downloading the file.

ü§ï PATCH:

The PATCH request method is used to make partial changes to a resource.

üó£üôä CONNECT:

The CONNECT method initiates two-way communication with the resource requested and can open a tunnel. HTTPS connections can use CONNECT method to connect through an HTTP Proxy server.

üìå OPTIONS:

The OPTIONS method requests communication options for a specific URL or server, allowing clients to specify either a URL or an asterisk (*) to refer to the entire server.

üî≠ TRACE:

The TRACE method performs a message loop-back test along the path to the target resource. TRACE requests can be helpful when debugging.

Designing effective and safe APIs (Application Programming Interfaces) involves careful consideration of various factors. Here is a list of points to help you design effective and safe APIs:

Consistent and Intuitive Interface: Design the API with a clear and intuitive interface that follows standard conventions and is consistent across endpoints. This helps developers understand and use the API more easily.

Security Measures: Implement proper security measures such as authentication, authorization, and encryption to protect sensitive data and prevent unauthorized access to the API.

Use Standard Protocols: Utilize widely adopted and standardized protocols such as HTTPS for secure communication, JSON or XML for data serialization, and REST or GraphQL for API architecture. Standard protocols promote interoperability and ease of integration.

Versioning: Plan for versioning the API to ensure backward compatibility and allow for future enhancements without breaking existing integrations. This allows developers to migrate to newer versions at their own pace.

Error Handling: Define clear and meaningful error messages and error codes to guide developers when errors occur. Include relevant information in error responses to assist in troubleshooting and debugging.

Rate Limiting and Throttling: Implement rate limiting and throttling mechanisms to prevent abuse, ensure fair usage, and protect the API server from being overwhelmed with excessive requests.

Comprehensive Documentation: Provide thorough and up-to-date documentation that explains the API endpoints, request and response formats, authentication methods, error handling, and any specific usage guidelines. Good documentation facilitates understanding and accelerates development.

Consistent Data Formats: Use consistent and well-defined data formats throughout the API, ensuring that data structures and types remain consistent across different endpoints. This promotes ease of use and reduces confusion.

Input Validation and Sanitization: Validate and sanitize all user inputs to prevent security vulnerabilities like injection attacks. Ensure that the API rejects invalid or malicious inputs and provides appropriate error messages.

Performance Considerations: Optimize the API for performance by minimizing response times, caching frequently accessed data, and using efficient algorithms and data structures. This helps provide a smooth and responsive experience for API consumers.

API Analytics and Monitoring: Implement analytics and monitoring capabilities to track API usage, performance metrics, and error rates. This helps identify issues, optimize performance, and make informed decisions for future enhancements.

Version Control and Deployment Strategy: Establish a robust version control system for the API codebase, and implement a reliable deployment strategy to ensure smooth updates and rollbacks as needed.

Testing and Quality Assurance: Thoroughly test the API using different scenarios, including positive and negative test cases, to ensure correct behavior and robustness. Conduct security audits and code reviews to identify and address potential vulnerabilities.

Feedback and Community Support: Encourage feedback from API users and provide a support channel for developers to ask questions, report issues, and suggest improvements. Actively engage with the developer community to address concerns and foster a collaborative environment.

Remember that these points are general guidelines, and the specific requirements of your API may vary depending on the context and use case.



https://www.youtube.com/@CodeDecode/playlists

https://dotnet.microsoft.com/en-us/apps/aspnet/apis
https://learn.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?WT.mc_id=dotnet-35129-website&view=aspnetcore-7.0&tabs=visual-studio

